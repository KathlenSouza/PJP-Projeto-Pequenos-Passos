package com.api.pjpPequenosPassos.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "avaliacoes_profissionais")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class AvaliacaoProfissional {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "Nota é obrigatória")
    @Min(value = 1, message = "Nota mínima é 1")
    @Max(value = 5, message = "Nota máxima é 5")
    @Column(nullable = false)
    private Double nota;

    @Column(columnDefinition = "TEXT")
    private String comentario;

    @Column(nullable = false)
    @Builder.Default
    private Boolean recomenda = true;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime dataAvaliacao;

    // ====== RELACIONAMENTOS ======

    // lado MUITOS -> UM com Profissional
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    @JsonBackReference("profissional-avaliacao")   // casa com o @JsonManagedReference do Profissional
    private Profissional profissional;

    // lado MUITOS -> UM com Usuario
    // aqui não temos o lado inverso no Usuario, então só ignoramos os proxys do Hibernate
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "usuario_id", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private Usuario usuario;

    // ====== MÉTODO DE APOIO ======
    public String getClassificacao() {
        if (nota >= 4.5) {
            return "Excelente";
        } else if (nota >= 3.5) {
            return "Muito Bom";
        } else if (nota >= 2.5) {
            return "Bom";
        } else if (nota >= 1.5) {
            return "Regular";
        } else {
            return "Ruim";
        }
    }
}

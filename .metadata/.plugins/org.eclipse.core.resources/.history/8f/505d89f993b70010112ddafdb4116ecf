package com.api.pjpPequenosPassos.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;

@Entity
@Table(name = "avaliacoes_profissionais")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class AvaliacaoProfissional {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // usei Integer porque @Min/@Max funcionam melhor com inteiros
    @NotNull(message = "Nota é obrigatória")
    @Min(value = 1, message = "Nota mínima é 1")
    @Max(value = 5, message = "Nota máxima é 5")
    @Column(nullable = false)
    private Integer nota;

    @Column(columnDefinition = "TEXT")
    private String comentario;

    @Column(nullable = false)
    private Boolean recomenda = Boolean.TRUE;

    @Column(nullable = false, updatable = false)
    private LocalDateTime dataAvaliacao = LocalDateTime.now();

    // ---------- RELACIONAMENTOS ----------
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    @JsonIgnoreProperties({"avaliacoes"})
    private Profissional profissional;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "usuario_id", nullable = false)
    @JsonIgnoreProperties({"criancas", "avaliacoesFeitas"})
    private Usuario usuario;

    // ---------- CONSTRUTORES ----------
    public AvaliacaoProfissional() {
    }

    // ---------- GETTERS / SETTERS ----------
    public Long getId() {
        return id;
    }

    public Integer getNota() {
        return nota;
    }

    public void setNota(Integer nota) {
        this.nota = nota;
    }

    public String getComentario() {
        return comentario;
    }

    public void setComentario(String comentario) {
        this.comentario = comentario;
    }

    public Boolean getRecomenda() {
        return recomenda;
    }

    public void setRecomenda(Boolean recomenda) {
        this.recomenda = recomenda;
    }

    public LocalDateTime getDataAvaliacao() {
        return dataAvaliacao;
    }

    public Profissional getProfissional() {
        return profissional;
    }

    public void setProfissional(Profissional profissional) {
        this.profissional = profissional;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    // ---------- MÉTODO AUXILIAR ----------
    @Transient
    public String getClassificacao() {
        if (nota == null) return "Sem nota";
        if (nota >= 5) return "Excelente";
        if (nota >= 4) return "Muito Bom";
        if (nota >= 3) return "Bom";
        if (nota >= 2) return "Regular";
        return "Ruim";
    }
}
